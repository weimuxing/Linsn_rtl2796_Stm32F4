///*****************************************
//  Copyright (C) 2009-2015
//  ITE Tech. Inc. All Rights Reserved
//  Proprietary and Confidential
///*****************************************
//   @file   <Hdmi_Rx.h>
//   @author Hanming.Cheng@ite.com.tw
//   @date   2015/10/28
//   @fileversion: ITE_SPLITER_1.16
//******************************************/
///*****************************************
//  Copyright (C) 2009-2014
//  ITE Tech. Inc. All Rights Reserved
//  Proprietary and Confidential
///*****************************************
//   @file   <Hdmi_Rx.h>
//   @author Hanming.Cheng@ite.com.tw
//   @date   2014/12/17
//   @fileversion: ITE_SPLITER_1.01
//******************************************/
#ifndef _HDMI_RX_H_
#define _HDMI_RX_H_
#include "it6662/include/IT6662_IO.h"

#define HdmiRx_Bank(x)	HdmiRx_Set(0x0F, 0x03, x)

#ifdef HDMI_RX_INIT_TABLE
static iTE_u8 _CODE HDMI_RX_INIT_TAB[][3] = {
	{0x10, 0xFF, 0x08},
     	{0x10, 0xFF, 0x17},
	{0x11, 0xFF, 0x1F},
	{0x12, 0xFF, 0xF8},
	{0x18, 0xFF, 0x1F},
	{0x00, 0x00, 0x01},
	{0x10, 0xFF, 0x10},
	{0x11, 0xFF, 0xA0},
	{0x12, 0xFF, 0x00},
	{0x18, 0xFF, 0xA0},
	{0x51, 0x01, 0x00/*PortSel*/},//??????????
	{0x77, 0x80, 0x80},
	{0x0F, 0xFF, 0x01},		//HdmiRx_Bank(1)
	{0xC0, 0x80, 0x80},
	{0x0F, 0xFF, 0x00},		// HdmiRx_Bank(0)

		{0x63, 0x20, 0x20},
#if (EnAutoEQ == iTE_TRUE)
	{0x27, 0xFF, 0x1F},
	{0x28, 0xFF, 0x1F},
	{0x29, 0xFF, 0x1F},
	{0x0F, 0xFF, 0x01},		// HdmiRx_Bank(1)
	{0xBC, 0xFF, 0x06},
	{0x0F, 0xFF, 0x00},		// HdmiRx_Bank(0)
	{0x20, 0x40, 0x40},
	{0x22, 0xFF, 0x38},
	{0x26, 0xFF, 0x80},
#else
	{0x26, 0xFF, 0x20},
	{0x27, 0xFF, DefaultEQ},		// MHL: 0xBF, HDMI: 0xFF
#endif

	{0x16, 0x08, 0x08},
	{0x17, 0xC0, (INVHCLK<<7) + (P0INVCLKD5<<6)},
	{0x2A, 0x10, EnP0PLLBufRst<<4},
	{0x2C, 0x01, 0x00},	//disable tieout for 4k2k
//{0x2C, 0x18, 0x18},
	{0x2B, 0xFF, 0x07},
	{0x31, 0xFF, (EnRepeater<<7)+(En1p1Feature<<5)+(EnFastAuth<<4)+(BCap7B<<3)+(UpdRiSel<<2)},
//	{0x34, 0xFF, MHL_RX_ADR | 0x01},
	{0x35, 0x0C, DeltaNum<<2},
{0x35, 0x0C, 0x0C},
	{0x66, 0x03, STBMODE},
	{0x6A, 0xFF, GenPktRecType},
	{0x71, 0x08, 0x00},	//disable ppcolmode

	{0x37, 0xFF, 0x88},	//WCLK valid setting

	{0x0F, 0xFF, 0x01},
	{0xB5, 0x03, 0x03},
	{0xC0, 0x1C, CBUS1KPD << 2},
	{0x0F, 0xFF, 0x00},

	{0x89, 0xFF, 0x00},
#if (HDCPIntKey == iTE_TRUE)
	{0x73, 0x08, 0x08},
	{0x90, 0xFF, 0x22},
	{0x00, 0x00, 0x01},
	{0x90, 0xFF, 0x22},
	{0x00, 0x00, 0x01},
	{0x90, 0xFF, 0x22},
#else
	{0x73, 0x08, 0x00},
#endif

	{0x50, 0x1F, RegSelVdoDly},
#if (OutCD == OUT10B)
	{0x65, 0x0C, 0x04},
#elif (OutCD == OUT12B)
	{0x65, 0x0C, 0x08},
#else
	{0x65, 0x0C, 0x00},
#endif

#if (EnDbg == iTE_TRUE)
	{0x51, 0x02, 0x02},
	{0x72, 0xFF, DbgPortSel},
#else
	{0x51, 0x02, 0x00},
	{0x72, 0xFF, DbgPortSel},
#endif

#if (EnForceHDMI == iTE_TRUE)
	{0x2D, 0x03, 0x03},
#else
	{0x2D, 0x03, 0x00},
#endif

#if (RegAVMuteSel == iTE_TRUE)
	{0x85, 0x02, 0x02},
#else
	{0x85, 0x02, 0x00},
#endif

#if (RegPwdCSC == iTE_TRUE)
	{0x51, 0x80, 0x80},
#else
	{0x51, 0x80, 0x00},
#endif

#if (EnMultiSeg == iTE_TRUE)
	{0xC0, 0x40, 0x40},
#else
	{0xC0, 0x40, 0x00},
#endif

#if (EnIntEDID == iTE_TRUE)
	{0xC0, 0x03, 0x00},
//	{0x87, 0xFF, EDID_ADR | 0x01},
#else
	{0xC0, 0x03, 0x03},
//	{0x87, 0xFF, EDID_ADR},
#endif

/*
#if (EnIntEDID == iTE_TRUE) //@LV 20160319
		{0xC0, 0x0F, 0x04},
	//	{0x87, 0xFF, EDID_ADR | 0x01},
#else
		{0xC0, 0x0F, 0x0B},
	//	{0x87, 0xFF, EDID_ADR},
#endif
*/
#if (OutFormat == RGB444_SDR)
	{0x51, 0x64, 0x00},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x00},
#elif (OutFormat == YUV444_SDR)
	{0x51, 0x64, 0x00},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x20},
#elif (OutFormat == RGB444_DDR)
	{0x51, 0x64, 0x40},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x00},
#elif (OutFormat == YUV444_DDR)
	{0x51, 0x64, 0x40},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x20},
#elif (OutFormat == YUV422_EMB_SYNC_SDR)
	{0x51, 0x64, 0x00},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x50},
#elif (OutFormat == YUV422_EMB_SYNC_DDR)
	{0x51, 0x64, 0x40},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x50},
#elif (OutFormat == YUV422_SEP_SYNC_SDR)
	{0x51, 0x64, 0x00},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x10},
#elif (OutFormat == YUV422_SEP_SYNC_DDR)
	{0x51, 0x64, 0x40},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x10},
#elif (OutFormat == CCIR656_EMB_SYNC_SDR)
	{0x51, 0x64, 0x04},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x50},
#elif (OutFormat == CCIR656_EMB_SYNC_DDR)
	{0x51, 0x64, 0x44},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x50},
#elif (OutFormat == CCIR656_SEP_SYNC_SDR)
	{0x51, 0x64, 0x04},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x10},
#elif (OutFormat == CCIR656_SEP_SYNC_DDR)
	{0x51, 0x64, 0x44},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x10},
#elif (OutFormat == RGB444_HALF_BUS)
	{0x51, 0x64, 0x20},
	{0x64, 0x10, 0x10},
	{0x65, 0xF0, 0x00},
#elif (OutFormat == YUV444_HALF_BUS)
	{0x51, 0x64, 0x20},
	{0x64, 0x10, 0x10},
	{0x65, 0xF0, 0x20},
#elif (OutFormat == BTA1004_SDR)
	{0x51, 0x64, 0x00},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0xD0},
#elif (OutFormat == BTA1004_DDR)
	{0x51, 0x64, 0x40},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0xD0},
#else
	{0x51, 0x64, 0x00},
	{0x64, 0x10, 0x00},
	{0x65, 0xF0, 0x00},
#endif

#if (HDCPInitial == iTE_TRUE)
	{0x0F, 0xFF, 0x01},
	{0x14, 0xFF, 0x00},
	{0x15, 0xFF, 0x00},
	{0x16, 0xFF, 0x00},
	{0x17, 0xFF, 0x00},
	{0x18, 0xFF, 0x00},
	{0x19, 0xFF, 0x00},
	{0x1A, 0xFF, 0x00},
	{0x1B, 0xFF, 0x00},
	{0x1C, 0xFF, 0x00},
	{0x1D, 0xFF, 0x00},
	{0x1E, 0xFF, 0x00},
	{0x1F, 0xFF, 0x00},
	{0x20, 0xFF, 0x00},
	{0x21, 0xFF, 0x00},
	{0x22, 0xFF, 0x00},
	{0x23, 0xFF, 0x00},
	{0x24, 0xFF, 0x00},
	{0x25, 0xFF, 0x00},
	{0x26, 0xFF, 0x00},
	{0x27, 0xFF, 0x00},
	{0x28, 0xFF, 0x00},
	{0x29, 0xFF, 0x00},
	{0x2A, 0xFF, 0x00},
	{0x2B, 0xFF, 0x00},
	{0x2C, 0xFF, 0x00},
	{0x2D, 0xFF, 0x00},
	{0x2E, 0xFF, 0x00},
	{0x2F, 0xFF, 0x00},
	{0x30, 0xFF, 0x00},
	{0x31, 0xFF, 0x00},
	{0x32, 0xFF, 0x00},
	{0x33, 0xFF, 0x00},
	{0x34, 0xFF, 0x00},
	{0x35, 0xFF, 0x00},
	{0x36, 0xFF, 0x00},
	{0x37, 0xFF, 0x00},
	{0x38, 0xFF, 0x00},
	{0x39, 0xFF, 0x00},
	{0x3A, 0xFF, 0x00},
	{0x3B, 0xFF, 0x00},
	{0x3C, 0xFF, 0x00},
	{0x3D, 0xFF, 0x00},
	{0x3E, 0xFF, 0x00},
	{0x3F, 0xFF, 0x00},
	{0x40, 0xFF, 0x00},
	{0x41, 0xFF, 0x00},
	{0x42, 0xFF, 0x00},
	{0x43, 0xFF, 0x00},
	{0x44, 0xFF, 0x00},
	{0x45, 0xFF, 0x00},
	{0x46, 0xFF, 0x00},
	{0x47, 0xFF, 0x00},
	{0x48, 0xFF, 0x00},
	{0x49, 0xFF, 0x00},
	{0x4A, 0xFF, 0x00},
	{0x4B, 0xFF, 0x00},
	{0x4C, 0xFF, 0x00},
	{0x4D, 0xFF, 0x00},
	{0x4E, 0xFF, 0x00},
	{0x4F, 0xFF, 0x00},
	{0x0F, 0xFF, 0x00},
#endif
// CSC coef default setting for YCbCr422
	{0x0F, 0xFF, 0x01},
	{0x70, 0xFF, 0x00},
	{0x71, 0xFF, 0x00},
	{0x72, 0xFF, 0x00},
	{0x73, 0xFF, 0x4F},
	{0x74, 0xFF, 0x09},
	{0x75, 0xFF, 0x81},
	{0x76, 0xFF, 0x39},
	{0x77, 0xFF, 0xDF},
	{0x78, 0xFF, 0x3C},
	{0x79, 0xFF, 0x4F},
	{0x7A, 0xFF, 0x09},
	{0x7B, 0xFF, 0xC2},
	{0x7C, 0xFF, 0x0C},
	{0x7D, 0xFF, 0x00},
	{0x7E, 0xFF, 0x00},
	{0x7F, 0xFF, 0x4F},
	{0x80, 0xFF, 0x09},
	{0x81, 0xFF, 0x00},
	{0x82, 0xFF, 0x00},
	{0x83, 0xFF, 0x1E},
	{0x84, 0xFF, 0x10},
	{0x0F, 0xFF, 0x00},

//	{0x8D, 0xFF, HDMI_TX_ADR | 0x01},
	{0x81, 0x07, 0x02},
};
#define HDMI_RX_INIT_TAB_SIZE	sizeof(HDMI_RX_INIT_TAB)/3
#endif

typedef enum SysState_Type {
    SYS_Reset = 0,
	SYS_NorOp,
	SYS_AuthStr,
	SYS_AuthDn,
	SYS_Unknown
} SysState_Type ;

typedef enum VidState_Type {
    Vid_Reset = 0,
    Vid_WaitForVidIn,
	Vid_UnStableChk,
	Vid_VidInStable,
	Vid_EnOutPut,
    Vid_Unknown
} VidState_Type ;

typedef struct {
    int HActive ;
    int VActive ;
    int HTotal ;
    int VTotal ;
    int PCLK ;
    int HFrontPorch ;
    int HSyncWidth ;
    int HBackPorch ;
    int VFrontPorch ;
    int VSyncWidth ;
    int VBackPorch ;
    int ScanMode ;
    int VPolarity ;
    int HPolarity ;
	char *format;
} VTiming ;

void HdmiRx_EnCec(void);
void HdmiRx_Init(void);
void HdmiRx_Irq(void);
void HdmiRx_Sw_Timer_IRQ(void);
void HdmiRx_GetTmdsClk(void);

void HdmiRx_ShowInfo(void);
void HdmiRx_GetVideoTiming(VTiming *pCurVTiming);
iTE_u8 HdmiRx_GetVideoFormat(VTiming *pCurVTiming);
void HdmiRx_ShowVidInfo(void);
void HdmiRx_GetVideoTiming(VTiming *pCurVTiming);
void HdmiRx_CscOutputSet(iTE_u8 u8OutClr);
void HdmiRx_AfeReset(void );
#if iTE_HdmiRx_Msg_Print
void HdmiRx_ShowHdcpStatus(void);
#endif
void HdmiRx_HpdOut(iTE_u8 u8OutStatus);
void HdmiRx_HpdClr(iTE_u1 bHpdSta);
void HdmiRx_HpdSet(void);
void HdmiRx_TrgHpd(iTE_u8 u8TimeCnt);
void HdmiRx_SpenHdcp(void);
void HdmiRx_ShaCheck(iTE_pu8 pu8Buf, iTE_pu32 pu32Hash, iTE_u16 u16DevCnt);
#if (USING_KSV_PARTIAL_READ == iTE_FALSE)
void SHA_Simple(iTE_u8 *pBuff, iTE_uDef uDefCnt, iTE_u32 *u32Hash);
#else
void SHA_Simple64(iTE_u8 *pBuff, iTE_u32 *u32Hash);
#endif
void SHA_Transform(iTE_u32 *u32Hash, iTE_pu32 u32Word);
#if (USING_AUTO_EQ == iTE_TRUE)
void HdmiRx_AutoEqTrigger(void);
void HdmiRx_AutoEQTogglePolarity(void );
void HdmiRx_AmpValue2EQ(iTE_u8 u8Mhl);
void HdmiRx_AutoEQDump(void);
void HdmiRx_EqChk(void);
void HdmiRx_EccChk(void);
void HdmiRx_ManulEqTrigger(void);
void HdmiRx_ManulEqSet(void);
#endif

#define HdmiRx_Wb(u8Offset, u8Count, pu8Data)	iTE_I2C_WriteBurst(HDMI_RX_ADR, u8Offset, u8Count, pu8Data)
#define HdmiRx_Rb(u8Offset, u8Count, pu8Data)	iTE_I2C_ReadBurst(HDMI_RX_ADR, u8Offset, u8Count, pu8Data)
#define HdmiRx_Set(u8Offset, u8InvMask, u8Data)	iTE_I2C_SetByte(HDMI_RX_ADR, u8Offset, u8InvMask, u8Data)
#define HdmiRx_W(u8Offset, u8Data)				iTE_I2C_WriteByte(HDMI_RX_ADR, u8Offset, u8Data)
#define HdmiRx_R(u8Offset)						iTE_I2C_ReadByte(HDMI_RX_ADR, u8Offset)
#endif
